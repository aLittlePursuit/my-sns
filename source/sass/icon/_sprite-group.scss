// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$icons-change-bg-name: 'icons-change-bg';
$icons-change-bg-x: 0px;
$icons-change-bg-y: 0px;
$icons-change-bg-offset-x: 0px;
$icons-change-bg-offset-y: 0px;
$icons-change-bg-width: 42px;
$icons-change-bg-height: 42px;
$icons-change-bg-total-width: 85px;
$icons-change-bg-total-height: 58px;
$icons-change-bg-image: '../../images/group/sprite-group.png';
$icons-change-bg: (0px, 0px, 0px, 0px, 42px, 42px, 85px, 58px, '../../images/group/sprite-group.png', 'icons-change-bg', );
$icons-digest-name: 'icons-digest';
$icons-digest-x: 0px;
$icons-digest-y: 42px;
$icons-digest-offset-x: 0px;
$icons-digest-offset-y: -42px;
$icons-digest-width: 16px;
$icons-digest-height: 16px;
$icons-digest-total-width: 85px;
$icons-digest-total-height: 58px;
$icons-digest-image: '../../images/group/sprite-group.png';
$icons-digest: (0px, 42px, 0px, -42px, 16px, 16px, 85px, 58px, '../../images/group/sprite-group.png', 'icons-digest', );
$icons-hot-name: 'icons-hot';
$icons-hot-x: 42px;
$icons-hot-y: 17px;
$icons-hot-offset-x: -42px;
$icons-hot-offset-y: -17px;
$icons-hot-width: 28px;
$icons-hot-height: 18px;
$icons-hot-total-width: 85px;
$icons-hot-total-height: 58px;
$icons-hot-image: '../../images/group/sprite-group.png';
$icons-hot: (42px, 17px, -42px, -17px, 28px, 18px, 85px, 58px, '../../images/group/sprite-group.png', 'icons-hot', );
$icons-is-top-name: 'icons-is_top';
$icons-is-top-x: 16px;
$icons-is-top-y: 42px;
$icons-is-top-offset-x: -16px;
$icons-is-top-offset-y: -42px;
$icons-is-top-width: 16px;
$icons-is-top-height: 16px;
$icons-is-top-total-width: 85px;
$icons-is-top-total-height: 58px;
$icons-is-top-image: '../../images/group/sprite-group.png';
$icons-is-top: (16px, 42px, -16px, -42px, 16px, 16px, 85px, 58px, '../../images/group/sprite-group.png', 'icons-is_top', );
$icons-jingxuan-name: 'icons-jingxuan';
$icons-jingxuan-x: 42px;
$icons-jingxuan-y: 0px;
$icons-jingxuan-offset-x: -42px;
$icons-jingxuan-offset-y: 0px;
$icons-jingxuan-width: 43px;
$icons-jingxuan-height: 17px;
$icons-jingxuan-total-width: 85px;
$icons-jingxuan-total-height: 58px;
$icons-jingxuan-image: '../../images/group/sprite-group.png';
$icons-jingxuan: (42px, 0px, -42px, 0px, 43px, 17px, 85px, 58px, '../../images/group/sprite-group.png', 'icons-jingxuan', );
$spritesheet-width: 85px;
$spritesheet-height: 58px;
$spritesheet-image: '../../images/group/sprite-group.png';
$spritesheet-sprites: ($icons-change-bg, $icons-digest, $icons-hot, $icons-is-top, $icons-jingxuan, );
$spritesheet: (85px, 58px, '../../images/group/sprite-group.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
